use std::fmt;

use ckb_types::packed::Script;
use serde_derive::{Deserialize, Serialize};

/// A script group is defined as scripts that share the same hash.
///
/// A script group will only be executed once per transaction, the
/// script itself should check against all inputs/outputs in its group
/// if needed.
#[derive(Clone, Eq, PartialEq, Debug)]
pub struct ScriptGroup {
    /// The script.
    ///
    /// A script group is a group of input and output cells that share the same script.
    pub script: Script,
    /// The script group type.
    pub group_type: ScriptGroupType,
    /// Indices of input cells.
    pub input_indices: Vec<usize>,
    /// Indices of output cells.
    pub output_indices: Vec<usize>,
}

impl ScriptGroup {
    /// Creates a new script group struct.
    pub fn new(script: &Script, group_type: ScriptGroupType) -> Self {
        Self {
            group_type,
            script: script.to_owned(),
            input_indices: vec![],
            output_indices: vec![],
        }
    }

    /// Creates a lock script group.
    pub fn from_lock_script(script: &Script) -> Self {
        Self::new(script, ScriptGroupType::Lock)
    }

    /// Creates a type script group.
    pub fn from_type_script(script: &Script) -> Self {
        Self::new(script, ScriptGroupType::Type)
    }
}

/// This is a mirror struct of the `ScriptGroup`, which is used to do json serialization/deserialization.
///
/// This is caused by ckb_types::packed::Script is generated by molecule, and not implement Serialize/Deserialize,
/// and can not use remote [remote derive idiom](https://serde.rs/remote-derive.html), since the 2 script types have different fields.
#[derive(Clone, Eq, Serialize, Deserialize, PartialEq, Debug)]
struct JsonScriptGroup {
    /// The script.
    ///
    /// A script group is a group of input and output cells that share the same script.
    script: ckb_jsonrpc_types::Script,
    /// The script group type.
    group_type: ScriptGroupType,
    /// Indices of input cells.
    input_indices: Vec<usize>,
    /// Indices of output cells.
    output_indices: Vec<usize>,
}

impl From<ScriptGroup> for JsonScriptGroup {
    fn from(value: ScriptGroup) -> Self {
        let script = value.script.into();
        JsonScriptGroup {
            script,
            group_type: value.group_type,
            input_indices: value.input_indices,
            output_indices: value.output_indices,
        }
    }
}

impl From<JsonScriptGroup> for ScriptGroup {
    fn from(value: JsonScriptGroup) -> Self {
        let script = value.script.into();
        ScriptGroup {
            script,
            group_type: value.group_type,
            input_indices: value.input_indices,
            output_indices: value.output_indices,
        }
    }
}

impl serde::Serialize for ScriptGroup {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        let json_script_group = JsonScriptGroup::from(self.clone());
        serializer.serialize_newtype_struct("ScriptGroup", &json_script_group)
    }
}

impl<'de> serde::Deserialize<'de> for ScriptGroup {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let json_script_group = JsonScriptGroup::deserialize(deserializer)?;
        let script_group: ScriptGroup = ScriptGroup::from(json_script_group);
        Ok(script_group)
    }
}

/// The script group type.
///
/// A cell can have a lock script and an optional type script. Even they reference the same script,
/// lock script and type script will not be grouped together.
#[derive(Copy, Clone, Serialize, Deserialize, PartialEq, Eq, Hash, Debug)]
#[serde(rename_all = "snake_case")]
pub enum ScriptGroupType {
    /// Lock script group.
    Lock,
    /// Type script group.
    Type,
}

impl fmt::Display for ScriptGroupType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
            ScriptGroupType::Lock => write!(f, "Lock"),
            ScriptGroupType::Type => write!(f, "Type"),
        }
    }
}
